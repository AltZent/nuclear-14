using System.Linq;
using Content.Client.Message;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;


namespace Content.Client._NC.Trade;


[GenerateTypedNameReferences]
public sealed partial class NcStoreMenu : FancyWindow
{
    private const int SearchDebounceMs = 120;
    private const int PageSize = 96;

    private static readonly Color CatSelected = new(0xD9, 0xA4, 0x41);
    private static readonly Color CatIdle = new(0x7C, 0x66, 0x24);

    private readonly Dictionary<string, (NcStoreListingControl Ctrl, string Sig)> _buyCache = new();

    private readonly Dictionary<string, Button> _buyCatButtons = new();

    private readonly List<string> _buyCats = new();

    private readonly List<StoreListingData> _items = new();

    private readonly IPrototypeManager _proto;

    private readonly Dictionary<string, int> _qtyCache = new();
    private readonly Dictionary<string, (NcStoreListingControl Ctrl, string Sig)> _sellCache = new();
    private readonly Dictionary<string, Button> _sellCatButtons = new();
    private readonly List<string> _sellCats = new();
    private readonly SpriteSystem _sprites;

    private int _balance;

    private string _buyCat = string.Empty;

    private int _pageBuy = 1;
    private int _pageSell = 1;

    private string _search = string.Empty;
    private int _searchToken;
    private string _sellCat = string.Empty;

    public NcStoreMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprites = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
        _proto = IoCManager.Resolve<IPrototypeManager>();

        SearchBar.OnTextChanged += _ =>
        {
            _search = SearchBar.Text.Trim();
            var token = ++_searchToken;
            Timer.Spawn(
                TimeSpan.FromMilliseconds(SearchDebounceMs),
                () =>
                {
                    if (token != _searchToken)
                        return;
                    ResetPaging();
                    OnSearchChanged?.Invoke(_search);
                    RefreshListings();
                });
        };

        BalanceLabel.StyleClasses.Add(StyleNano.StyleClassLabelHeadingBigger);
    }

    public event Action<string>? OnSearchChanged;
    public event Action<StoreListingData, int>? OnBuyPressed;
    public event Action<StoreListingData, int>? OnSellPressed;
    public event Action<StoreListingData, int>? OnExchangePressed;

    public void SetBalance(int balance)
    {
        _balance = balance;
        BalanceLabel.Text = balance.ToString();
        BalanceInfo.SetMarkup($"[font size=14][color=yellow]{balance}[/color][/font]");
    }

    public void Populate(List<StoreListingData> list)
    {
        _items.Clear();
        _items.AddRange(list);

        var ids = _items.Select(i => i.Id).ToHashSet();
        foreach (var key in _qtyCache.Keys.Where(k => !ids.Contains(k)).ToList())
            _qtyCache.Remove(key);

        _buyCats.Clear();
        _sellCats.Clear();

        _buyCats.AddRange(
            list.Where(i => i.Mode == StoreMode.Buy)
                .Select(i => i.Category)
                .Distinct()
                .OrderBy(c => c));

        _sellCats.AddRange(
            list.Where(i => i.Mode == StoreMode.Sell)
                .Select(i => i.Category)
                .Distinct()
                .OrderBy(c => c));

        const string readyCat = "Готово к продаже";
        if (_items.Any(i => i.Mode == StoreMode.Sell && i.Category == readyCat))
        {
            _sellCats.Remove(readyCat);
            _sellCats.Insert(0, readyCat);
            if (string.IsNullOrEmpty(_sellCat))
                _sellCat = readyCat;
        }

        if (!_buyCats.Contains(_buyCat))
            _buyCat = string.Empty;
        if (!_sellCats.Contains(_sellCat))
            _sellCat = string.Empty;

        BuildCategoryButtons();
        ResetPaging();
        RefreshListings();
    }

    private void RefreshListings()
    {
        var hasSearch = !string.IsNullOrWhiteSpace(_search);
        var buyCount = Filtered(StoreMode.Buy, _buyCat).Count();
        var sellCount = Filtered(StoreMode.Sell, _sellCat).Count();

        BuyCategoryHeader.Visible = !string.IsNullOrEmpty(_buyCat) || hasSearch;
        SellCategoryHeader.Visible = !string.IsNullOrEmpty(_sellCat) || hasSearch;

        if (BuyCategoryHeader.Visible)
        {
            BuyCategoryHeader.Text = !string.IsNullOrEmpty(_buyCat)
                ? _buyCat
                : $"Результаты поиска ({buyCount})";
        }
        else
            BuyCategoryHeader.Text = string.Empty;

        if (SellCategoryHeader.Visible)
        {
            SellCategoryHeader.Text = !string.IsNullOrEmpty(_sellCat)
                ? _sellCat
                : $"Результаты поиска ({sellCount})";
        }
        else
            SellCategoryHeader.Text = string.Empty;

        FillPaneFull(BuyListingsContainer, StoreMode.Buy, _buyCat, (d, qty) => OnBuyPressed?.Invoke(d, qty));
        FillPaneFull(SellListingsContainer, StoreMode.Sell, _sellCat, (d, qty) => OnSellPressed?.Invoke(d, qty));
    }


    private IEnumerable<StoreListingData> Filtered(StoreMode mode, string cat)
    {
        var q = _items.Where(i => i.Mode == mode);

        var hasCat = !string.IsNullOrEmpty(cat);
        var hasSearch = !string.IsNullOrWhiteSpace(_search);
        if (!hasCat && !hasSearch)
            return Enumerable.Empty<StoreListingData>();
        if (hasCat)
            q = q.Where(i => i.Category == cat);

        if (hasSearch)
            q = q.Where(i => MatchesSearch(i.ProductEntity));

        return q;
    }

    private void FillPaneFull(Control pane, StoreMode mode, string cat, Action<StoreListingData, int> emit)
    {
        pane.Children.Clear();

        var filtered = Filtered(mode, cat).ToList();

        if (string.IsNullOrEmpty(cat) && string.IsNullOrWhiteSpace(_search))
            return;

        if (filtered.Count == 0)
        {
            pane.AddChild(new Label { Text = "Выберите категорию.", });
            return;
        }

        var take = Math.Min(filtered.Count, PageSize * (mode == StoreMode.Buy ? _pageBuy : _pageSell));
        var slice = filtered.GetRange(0, take);

        AddListingRange(pane, mode, filtered, 0, slice.Count, emit);
        AddOrUpdateMoreButton(pane, mode, filtered.Count, take, cat, emit);
    }

    private void AppendNextPage(Control pane, StoreMode mode, string cat, Action<StoreListingData, int> emit)
    {
        var filtered = Filtered(mode, cat).ToList();
        var page = mode == StoreMode.Buy ? _pageBuy : _pageSell;
        var take = Math.Min(filtered.Count, PageSize * page);

        var already = 0;
        foreach (var ch in pane.Children)
            if (ch is NcStoreListingControl)
                already++;

        var toAddStart = already;
        var toAddEnd = Math.Min(take, filtered.Count);

        if (toAddStart < toAddEnd)
            AddListingRange(pane, mode, filtered, toAddStart, toAddEnd, emit);

        RemoveMoreButtons(pane);
        AddOrUpdateMoreButton(pane, mode, filtered.Count, take, cat, emit);
    }

    private void AddListingRange(
        Control pane,
        StoreMode mode,
        List<StoreListingData> source,
        int startExclusive,
        int endExclusive,
        Action<StoreListingData, int> emit
    )
    {
        var cache = mode == StoreMode.Buy ? _buyCache : _sellCache;

        for (var i = startExclusive; i < endExclusive; i++)
        {
            var it = source[i];
            var sig = Sig(it, _balance);

            NcStoreListingControl ctrl;
            if (cache.TryGetValue(it.Id, out var tuple) && tuple.Sig == sig)
                ctrl = tuple.Ctrl;
            else
            {
                var initQty = _qtyCache.TryGetValue(it.Id, out var saved) ? saved : 1;
                ctrl = new(it, _sprites, _balance, initQty);
                ctrl.OnQtyChanged += newQty => _qtyCache[it.Id] = newQty;

                switch (mode)
                {
                    case StoreMode.Buy:
                        ctrl.OnBuyPressed += qty => emit(it, qty);
                        break;
                    case StoreMode.Sell:
                        ctrl.OnSellPressed += qty => emit(it, qty);
                        break;
                    case StoreMode.Exchange:
                        ctrl.OnExchangePressed += qty => OnExchangePressed?.Invoke(it, qty);
                        break;
                }

                cache[it.Id] = (ctrl, sig);
            }

            pane.AddChild(ctrl);

            if (i < endExclusive - 1)
            {
                pane.AddChild(
                    new PanelContainer
                    {
                        MinSize = new Vector2i(0, 1),
                        StyleClasses = { "LowDivider", }
                    });
            }
        }
    }

    private static void RemoveMoreButtons(Control pane)
    {
        foreach (var ch in pane.Children.ToList())
            if (ch is Button b && b.Text != null && b.Text.StartsWith("Показать ещё (", StringComparison.Ordinal))
                pane.RemoveChild(b);
    }

    private void AddOrUpdateMoreButton(
        Control pane,
        StoreMode mode,
        int totalCount,
        int shown,
        string cat,
        Action<StoreListingData, int> emit
    )
    {
        if (shown >= totalCount)
            return;

        var left = totalCount - shown;

        var more = new Button
        {
            Text = $"Показать ещё ({left})",
            HorizontalExpand = true,
            Margin = new(0, 8, 0, 8)
        };

        more.OnPressed += _ =>
        {
            if (mode == StoreMode.Buy)
                _pageBuy++;
            else
                _pageSell++;

            AppendNextPage(pane, mode, cat, emit);
        };

        pane.AddChild(more);
    }

    private void BuildCategoryButtons()
    {
        _buyCatButtons.Clear();
        _sellCatButtons.Clear();

        MakeButtons(
            _buyCats,
            BuyCategoryListContainer,
            _buyCat,
            _buyCatButtons,
            cat =>
            {
                _buyCat = _buyCat == cat ? string.Empty : cat;
                UpdateCatVisuals(_buyCatButtons, _buyCat);
                ResetPaging();
                RefreshListings();
            });

        MakeButtons(
            _sellCats,
            SellCategoryListContainer,
            _sellCat,
            _sellCatButtons,
            cat =>
            {
                _sellCat = _sellCat == cat ? string.Empty : cat;
                UpdateCatVisuals(_sellCatButtons, _sellCat);
                ResetPaging();
                RefreshListings();
            });

        UpdateCatVisuals(_buyCatButtons, _buyCat);
        UpdateCatVisuals(_sellCatButtons, _sellCat);
    }

    private static void MakeButtons(
        IEnumerable<string> cats,
        Control parent,
        string current,
        Dictionary<string, Button> registry,
        Action<string> onClick
    )
    {
        parent.Children.Clear();

        foreach (var c in cats)
        {
            var selected = c == current;
            var btn = new Button
            {
                Text = c,
                ToggleMode = true,
                HorizontalExpand = true,
                Pressed = selected,
                ModulateSelfOverride = selected ? CatSelected : CatIdle
            };

            btn.OnMouseEntered += _ =>
                btn.ModulateSelfOverride = btn.Pressed ? Brighten(CatSelected, 1.2f) : Brighten(CatIdle, 1.2f);
            btn.OnMouseExited += _ =>
                btn.ModulateSelfOverride = btn.Pressed ? CatSelected : CatIdle;

            btn.OnPressed += _ => onClick(c);

            parent.AddChild(btn);
            registry[c] = btn;
        }
    }

    private static void UpdateCatVisuals(Dictionary<string, Button> map, string current)
    {
        foreach (var (name, btn) in map)
        {
            var selected = name == current;
            btn.Pressed = selected;
            btn.ModulateSelfOverride = selected ? CatSelected : CatIdle;
        }
    }

    private static Color Brighten(Color c, float f) =>
        new(MathF.Min(c.R * f, 1f), MathF.Min(c.G * f, 1f), MathF.Min(c.B * f, 1f), c.A);

    private void ResetPaging()
    {
        _pageBuy = 1;
        _pageSell = 1;
    }

    private static string Sig(StoreListingData d, int balance) =>
        d.Mode == StoreMode.Buy
            ? $"{d.Price}|{d.Remaining}|{d.Owned}|{d.CurrencyId}|{d.ProductEntity}|B{balance}"
            : $"{d.Price}|{d.Remaining}|{d.Owned}|{d.CurrencyId}|{d.ProductEntity}";

    private bool MatchesSearch(string protoId)
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (!_proto.TryIndex<EntityPrototype>(protoId, out var p))
            return false;

        return p.Name.Contains(_search, StringComparison.OrdinalIgnoreCase)
            || !string.IsNullOrEmpty(p.Description)
            && p.Description.Contains(_search, StringComparison.OrdinalIgnoreCase);
    }
}
