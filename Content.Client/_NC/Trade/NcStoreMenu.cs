using System.Linq;
using Content.Client.Message;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;


namespace Content.Client._NC.Trade;


[GenerateTypedNameReferences]
public sealed partial class NcStoreMenu : FancyWindow
{
    private static readonly Color CatSelected = new(0xD9, 0xA4, 0x41);
    private static readonly Color CatIdle = new(0x7C, 0x66, 0x24);


    private readonly List<string> _buyCats = new();

    private readonly List<StoreListingData> _items = new();
    private readonly IPrototypeManager _proto;
    private readonly Dictionary<string, int> _qtyCache = new();
    private readonly List<string> _sellCats = new();

    private readonly SpriteSystem _sprites;
    private int _balance;
    private string _buyCat = string.Empty;
    private string _search = string.Empty;
    private string _sellCat = string.Empty;

    public NcStoreMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprites = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
        _proto = IoCManager.Resolve<IPrototypeManager>();

        SearchBar.OnTextChanged += _ =>
        {
            _search = SearchBar.Text.Trim();
            OnSearchChanged?.Invoke(_search);
            RefreshListings();
        };

        BalanceLabel.StyleClasses.Add(StyleNano.StyleClassLabelHeadingBigger);
    }

    public event Action<string>? OnSearchChanged;
    public event Action<StoreListingData, int>? OnBuyPressed;
    public event Action<StoreListingData, int>? OnSellPressed;
    public event Action<StoreListingData, int>? OnExchangePressed;

    public void Populate(List<StoreListingData> list)
    {
        _items.Clear();
        _items.AddRange(list);
        var ids = _items.Select(i => i.Id).ToHashSet();
        foreach (var key in _qtyCache.Keys.Where(k => !ids.Contains(k)).ToList())
            _qtyCache.Remove(key);
        _buyCats.Clear();
        _sellCats.Clear();

        _buyCats.AddRange(
            list.Where(i => i.Mode == StoreMode.Buy)
                .Select(i => i.Category)
                .Distinct()
                .OrderBy(c => c));

        _sellCats.AddRange(
            list.Where(i => i.Mode == StoreMode.Sell)
                .Select(i => i.Category)
                .Distinct()
                .OrderBy(c => c));

        const string readyCat = "Готово к продаже";

        if (_items.Any(i => i.Mode == StoreMode.Sell && i.Category == readyCat))
        {
            _sellCats.Remove(readyCat);
            _sellCats.Insert(0, readyCat);

            if (string.IsNullOrEmpty(_sellCat))
                _sellCat = readyCat;
        }

        if (!_buyCats.Contains(_buyCat))
            _buyCat = string.Empty;
        if (!_sellCats.Contains(_sellCat))
            _sellCat = string.Empty;

        RefreshListings();
    }


    public void SetBalance(int balance)
    {
        _balance = balance;
        BalanceLabel.Text = balance.ToString();
        BalanceInfo.SetMarkup($"[font size=14][color=yellow]{balance}[/color][/font]");
    }

    private void BuildCategoryButtons()
    {
        MakeButtons(
            _buyCats,
            BuyCategoryListContainer,
            _buyCat,
            cat =>
            {
                _buyCat = cat == _buyCat ? string.Empty : cat;
                RefreshListings();
            });

        MakeButtons(
            _sellCats,
            SellCategoryListContainer,
            _sellCat,
            cat =>
            {
                _sellCat = cat == _sellCat ? string.Empty : cat;
                RefreshListings();
            });
    }

    private static Color Brighten(Color c, float f) =>
        new(
            MathF.Min(c.R * f, 1.0f),
            MathF.Min(c.G * f, 1.0f),
            MathF.Min(c.B * f, 1.0f),
            c.A
        );

    private static void MakeButtons(
        IEnumerable<string> cats,
        Control parent,
        string current,
        Action<string> onClick
    )
    {
        parent.Children.Clear();

        foreach (var c in cats)
        {
            var selected = c == current;
            var btn = new Button
            {
                Text = c,
                ToggleMode = true,
                HorizontalExpand = true,
                Pressed = selected,
                ModulateSelfOverride = selected ? CatSelected : CatIdle
            };

            btn.OnMouseEntered += _ => btn.ModulateSelfOverride = Brighten(CatSelected, 1.2f);
            btn.OnMouseExited += _ => btn.ModulateSelfOverride = btn.Pressed ? CatSelected : CatIdle;

            btn.OnPressed += _ => onClick(c);
            parent.AddChild(btn);
        }
    }


    private void RefreshListings()
    {
        BuildCategoryButtons();
        BuyCategoryHeader.Text = string.IsNullOrEmpty(_buyCat)
            ? "Выберите категорию"
            : _buyCat;

        SellCategoryHeader.Text = string.IsNullOrEmpty(_sellCat)
            ? "Выберите категорию"
            : _sellCat;
        FillPane(BuyListingsContainer, StoreMode.Buy, _buyCat, (d, qty) => OnBuyPressed?.Invoke(d, qty));
        FillPane(SellListingsContainer, StoreMode.Sell, _sellCat, (d, qty) => OnSellPressed?.Invoke(d, qty));
    }

    private void FillPane(Control pane, StoreMode mode, string cat, Action<StoreListingData, int> emit)
    {
        pane.Children.Clear();

        var catChosen = !string.IsNullOrEmpty(cat);
        var hasSearch = !string.IsNullOrWhiteSpace(_search);

        if (!catChosen && !hasSearch)
        {
            pane.AddChild(
                new Label
                {
                    Text = "Выберите категорию.",
                    StyleClasses = { "nc-store__hint", }
                });
            return;
        }

        var q = _items.Where(i => i.Mode == mode);

        if (catChosen)
            q = q.Where(i => i.Category == cat);

        if (hasSearch)
            q = q.Where(i => MatchesSearch(i.ProductEntity));

        var filtered = q.ToList();
        if (filtered.Count == 0)
        {
            pane.AddChild(
                new Label
                {
                    Text = "Ничего не найдено.",
                    StyleClasses = { "nc-store__hint", }
                });
            return;
        }

        for (var i = 0; i < filtered.Count; i++)
        {
            var it = filtered[i];

            var initQty = _qtyCache.TryGetValue(it.Id, out var saved) ? saved : 1;

            var ctrl = new NcStoreListingControl(it, _sprites, _balance, initQty);

            ctrl.OnQtyChanged += newQty => _qtyCache[it.Id] = newQty;

            if (mode == StoreMode.Buy)
                ctrl.OnBuyPressed += qty => emit(it, qty);
            else
                ctrl.OnSellPressed += qty => emit(it, qty);

            pane.AddChild(ctrl);

            if (i < filtered.Count - 1)
            {
                pane.AddChild(
                    new PanelContainer
                    {
                        MinSize = new Vector2i(0, 1),
                        StyleClasses = { "LowDivider", }
                    });
            }
        }
    }

    private bool MatchesSearch(string protoId)
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (!_proto.TryIndex<EntityPrototype>(protoId, out var p))
            return false;

        return p.Name.Contains(_search, StringComparison.OrdinalIgnoreCase)
            || !string.IsNullOrEmpty(p.Description)
            && p.Description.Contains(_search, StringComparison.OrdinalIgnoreCase);
    }
}
